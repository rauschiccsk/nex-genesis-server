#!/usr/bin/env python3
"""
create_directory_structure.py - Vytvorenie directory ≈°trukt√∫ry projektu

Tento script vytvor√≠ v≈°etky potrebn√© prieƒçinky pre nex-genesis-server projekt.

Usage:
    python scripts/create_directory_structure.py
"""

import os
from pathlib import Path

# ============================================================================
# CONFIGURATION
# ============================================================================

PROJECT_ROOT = Path(r"c:\Development\nex-genesis-server")

# Directory structure to create
DIRECTORIES = [
    # Documentation
    "docs",
    "docs/architecture",
    "docs/sessions",

    # Source codes
    "delphi-sources",
    "delphi-sources/Common",
    "delphi-sources/DataModules",
    "delphi-sources/DataTables",
    "delphi-sources/Libraries",
    "delphi-sources/Packages",
    "delphi-sources/Business",
    "delphi-sources/UI",

    # Generated output
    "output",

    # Templates for code generation
    "templates",

    # Configuration files
    "config",
    "config/examples",
    "config/queue",
    "config/processed",

    # Scripts
    "scripts",

    # Tests
    "tests",
    "tests/data",
    "tests/results",

    # Temporary and logs
    "logs",
    "temp",
]

# Files to create with .gitkeep
GITKEEP_DIRS = [
    "output",
    "config/queue",
    "config/processed",
    "logs",
    "temp",
    "tests/results",
]


# ============================================================================
# FUNCTIONS
# ============================================================================

def create_directory(path: Path):
    """Vytvor√≠ prieƒçinok ak neexistuje."""
    if not path.exists():
        path.mkdir(parents=True, exist_ok=True)
        print(f"‚úì Created: {path.relative_to(PROJECT_ROOT)}")
    else:
        print(f"  Exists:  {path.relative_to(PROJECT_ROOT)}")


def create_gitkeep(path: Path):
    """Vytvor√≠ .gitkeep s√∫bor v prieƒçinku."""
    gitkeep_file = path / ".gitkeep"
    if not gitkeep_file.exists():
        gitkeep_file.write_text("# This directory is tracked by git but empty\n")
        print(f"  + .gitkeep in {path.relative_to(PROJECT_ROOT)}")


def create_readme(directory: Path, content: str):
    """Vytvor√≠ README.md v prieƒçinku."""
    readme_file = directory / "README.md"
    if not readme_file.exists():
        readme_file.write_text(content)
        print(f"  + README.md in {directory.relative_to(PROJECT_ROOT)}")


# ============================================================================
# MAIN
# ============================================================================

def main():
    print("=" * 70)
    print("üèóÔ∏è  NEX Genesis Server - Directory Structure Creation")
    print("=" * 70)
    print()
    print(f"Project root: {PROJECT_ROOT}")
    print()

    # Create project root if doesn't exist
    if not PROJECT_ROOT.exists():
        print(f"Creating project root: {PROJECT_ROOT}")
        PROJECT_ROOT.mkdir(parents=True, exist_ok=True)

    # Create all directories
    print("üìÅ Creating directories...")
    print()
    for directory in DIRECTORIES:
        dir_path = PROJECT_ROOT / directory
        create_directory(dir_path)

    print()
    print("üìÑ Creating .gitkeep files...")
    print()
    for directory in GITKEEP_DIRS:
        dir_path = PROJECT_ROOT / directory
        if dir_path.exists():
            create_gitkeep(dir_path)

    # Create specific README files
    print()
    print("üìù Creating README files...")
    print()

    # delphi-sources README
    create_readme(
        PROJECT_ROOT / "delphi-sources",
        """# Delphi Sources

Place NEX Genesis ERP source codes here.

## Structure

```
delphi-sources/
‚îú‚îÄ‚îÄ Common/      # Shared units and utilities
‚îú‚îÄ‚îÄ Database/    # Database access layer
‚îú‚îÄ‚îÄ Business/    # Business logic
‚îî‚îÄ‚îÄ UI/          # User interface units
```

After adding source files, run:
```bash
python scripts/generate_project_access.py
```
"""
    )

    # output README
    create_readme(
        PROJECT_ROOT / "output",
        """# Generated Output

This directory contains generated Delphi microservices.

Files here are generated by the programming agent and should be:
1. Reviewed before use
2. Compiled in Delphi 6
3. Tested thoroughly

## Contents

Generated files will include:
- `*.pas` - Pascal units
- `*.dpr` - Delphi project files
- `*.dfm` - Form files (if needed)
"""
    )

    # templates README
    create_readme(
        PROJECT_ROOT / "templates",
        """# Code Templates

Templates for the programming agent.

These templates define the structure and patterns that the agent
should follow when generating Delphi 6 code.

## Template Types

- `service_template.pas` - Service unit template
- `endpoint_template.pas` - HTTP endpoint template
- `database_access_template.pas` - Database access template
"""
    )

    print()
    print("=" * 70)
    print("‚úÖ SUCCESS!")
    print("=" * 70)
    print()
    print("Next steps:")
    print("1. Copy NEX Genesis source codes to: delphi-sources/")
    print("2. Run: python scripts/generate_project_access.py")
    print("3. Commit and push to GitHub")
    print()


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print()
        print("=" * 70)
        print("‚ùå ERROR")
        print("=" * 70)
        print(f"Error: {e}")
        import traceback

        traceback.print_exc()
        exit(1)